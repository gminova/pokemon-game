{"version":3,"sources":["components/App.styled.ts","components/UserProfile.tsx","components/WelcomeBack.tsx","components/Home.tsx","components/Dashboard.tsx","components/Vocabulary.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","UserProfile","useState","input","setInput","onChange","e","target","value","to","onClick","localStorage","setItem","JSON","stringify","userName","score","userPokemons","WelcomeBack","parse","getItem","removeItem","location","reload","Home","loggedIn","text","Dashboard","guestUser","pokemonUser","length","Vocabulary","App","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"shBAEO,IAAMA,E,MAAYC,EAAOC,IAAV,K,QCITC,EAA+B,WAAO,IAAD,EACtBC,mBAAS,IADa,mBACzCC,EADyC,KAClCC,EADkC,KAGhD,OACE,6BACE,gDACA,2BAAOC,SAAU,SAACC,GAAD,OAAOF,EAASE,EAAEC,OAAOC,UAC1C,4BAAKL,GACJA,GACC,kBAAC,IAAD,CAAMM,GAAG,eACP,4BACEC,QAAS,WACPC,aAAaC,QACX,cACAC,KAAKC,UAAU,CACbC,SAAUZ,EACVa,MAAO,EACPC,aAAc,QAPtB,gBCbGC,EAAc,WAMzB,OACE,oCACE,4CACgB,IAEZL,KAAKM,MACHR,aAAaS,QAAQ,gBACnBP,KAAKC,UAAU,CAAEC,SAAU,WAC7BA,UAGN,kBAAC,IAAD,CAAMN,GAAG,eACP,8CAEF,4BAAQC,QAAS,kBAlBnBC,aAAaU,WAAW,oBAExBC,SAASC,WAgBP,2BCnBOC,EAAO,WAClB,IAAMC,EAAWd,aAAaS,QAAQ,eAEtC,OACE,oCAAIK,GAAY,kBAAC,EAAD,OAAoB,kBAAC,EAAD,CAAaC,KAAK,gBCN7CC,EAAY,WACvB,IAAMC,EAAYf,KAAKC,UAAU,CAC/BC,SAAU,QACVC,MAAO,EACPC,aAAc,KAGVY,EAAc,WAClB,OAA4C,OAAxClB,aAAaS,QAAQ,gBACvBT,aAAaC,QAAQ,cAAegB,GAC7Bf,KAAKM,MAAMS,IAGXf,KAAKM,MAAMR,aAAaS,QAAQ,gBAAkBQ,IAI7D,OACE,6BACE,4BACE,0CAAgBC,IAAcd,UAC9B,sCAAYc,IAAcb,OAC1B,wCAAca,IAAcZ,aAAaa,WCrBpCC,EAAa,kBAAM,kBAAC,EAAD,OCInBC,EAAgB,WAC3B,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCJQC,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91d4010a.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  text-align: center;\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  text: string;\n}\nexport const UserProfile: React.FC<Props> = () => {\n  const [input, setInput] = useState('');\n\n  return (\n    <div>\n      <h1>Enter your name:</h1>\n      <input onChange={(e) => setInput(e.target.value)} />\n      <h2>{input}</h2>\n      {input && (\n        <Link to=\"/vocabulary\">\n          <button\n            onClick={() => {\n              localStorage.setItem(\n                'pokemonUser',\n                JSON.stringify({\n                  userName: input,\n                  score: 0,\n                  userPokemons: [],\n                })\n              );\n            }}\n          >\n            Let's GO!\n          </button>\n        </Link>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const WelcomeBack = () => {\n  const logOutAndDeleteData = () => {\n    localStorage.removeItem('pokemonUser');\n    // eslint-disable-next-line no-restricted-globals\n    location.reload();\n  };\n  return (\n    <>\n      <h1>\n        Welcome Back,{' '}\n        {\n          JSON.parse(\n            localStorage.getItem('pokemonUser') ||\n              JSON.stringify({ userName: 'Guest' })\n          ).userName\n        }\n      </h1>\n      <Link to=\"/vocabulary\">\n        <button>Let's GO!</button>\n      </Link>\n      <button onClick={() => logOutAndDeleteData()}>\n        Log Out & Delete Data\n      </button>\n    </>\n  );\n};\n","import React from 'react';\nimport { UserProfile } from './UserProfile';\nimport { WelcomeBack } from './WelcomeBack';\n\nexport const Home = () => {\n  const loggedIn = localStorage.getItem('pokemonUser');\n\n  return (\n    <>{(loggedIn && <WelcomeBack />) || <UserProfile text=\"Some text\" />}</>\n  );\n};\n","import React from 'react';\n\nexport const Dashboard = () => {\n  const guestUser = JSON.stringify({\n    userName: 'Guest',\n    score: 0,\n    userPokemons: [],\n  });\n\n  const pokemonUser = () => {\n    if (localStorage.getItem('pokemonUser') === null) {\n      localStorage.setItem('pokemonUser', guestUser);\n      return JSON.parse(guestUser);\n    } else {\n      //Or guest user added to handle TS null exception\n      return JSON.parse(localStorage.getItem('pokemonUser') || guestUser);\n    }\n  };\n\n  return (\n    <div>\n      <ul>\n        <li>User name: {pokemonUser().userName}</li>\n        <li>Score: {pokemonUser().score}</li>\n        <li>Pokemons:{pokemonUser().userPokemons.length}</li>\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Dashboard } from './Dashboard';\n\nexport const Vocabulary = () => <Dashboard />;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport * as S from './App.styled';\n// import { Button } from './Button';\nimport { Home } from './Home';\nimport { Vocabulary } from './Vocabulary';\n\nexport const App: React.FC = () => {\n  return (\n    <S.Container>\n      <Router>\n        <Switch>\n          <Route path=\"/vocabulary\">\n            <Vocabulary />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n\n        {/* <Button /> */}\n      </Router>\n    </S.Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}